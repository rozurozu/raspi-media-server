---
- name: Raspberry Pi 初期セットアップ
  hosts: "{{ lookup('env', 'RASPI_TARGET_HOSTS') }}"
  gather_facts: yes
  become: yes

  vars:
    # ✅ 必須: 新規(または既存)管理ユーザー名と公開鍵は環境変数から渡してください
    # 未設定時は早期に fail します
    # 例: export RASPI_NEW_USER=admin; export RASPI_NEW_USER_PUBKEY="$(cat ~/.ssh/id_ed25519.pub)"
    new_user: "{{ lookup('env', 'RASPI_NEW_USER') }}"
    new_user_pubkey: "{{ lookup('env', 'RASPI_NEW_USER_PUBKEY') }}"
    set_hostname: "{{ lookup('env', 'RASPI_SET_HOSTNAME') }}"
    timezone: "Asia/Tokyo"

    # UID/GID は環境変数 (`RASPI_USER_UID` / `RASPI_USER_GID`) で上書き可能
    new_user_uid: "{{ (lookup('env', 'RASPI_USER_UID') | default(1000, true)) | int }}"
    new_user_gid: "{{ (lookup('env', 'RASPI_USER_GID') | default(1000, true)) | int }}"

    # UFWで開けるポート（OMV/SMB/NFS/SSHなど。環境に合わせて調整）
    ufw_allow_ports:
      - "22"          # SSH
      - "80"          # HTTP (OMV WebUI)
      - "443"         # HTTPS (OMV WebUI)
      - "139"         # SMB
      - "445"         # SMB
      - "111"         # NFS rpcbind
      - "2049"        # NFS
      - "892"         # NFS mountd (環境で必要なら)
      - "873"         # rsync (必要なら)

  pre_tasks:
    - name: Validate required environment for hosts and hostname
      assert:
        that:
          - (lookup('env','RASPI_TARGET_HOSTS') | length) > 0
          - (set_hostname | length) > 0
        fail_msg: |
          必須変数が不足しています。以下を環境変数で設定してください:
            - RASPI_TARGET_HOSTS (インベントリのホスト/グループ名)
            - RASPI_SET_HOSTNAME (セットするホスト名)

    - name: Validate required variables exist (early fail)
      assert:
        that:
          - new_user is defined
          - (new_user | length) > 0
          - new_user_pubkey is defined
          - (new_user_pubkey | length) > 20
          - (new_user_pubkey | regex_search('^[A-Za-z0-9-]+\\s+[A-Za-z0-9+/=]+(\\s.*)?$'))
        fail_msg: |
          必須変数が不足または不正です。以下を環境変数で設定してください:
            - RASPI_NEW_USER (例: admin)
            - RASPI_NEW_USER_PUBKEY (例: $(cat ~/.ssh/id_ed25519.pub))
          公開鍵は1行の OpenSSH 形式 (ssh-ed25519/ssh-rsa 等) を指定してください。

    - name: Ensure Python exists for Ansible (for super-minimal OS)
      raw: test -e /usr/bin/python3 || (apt-get update && apt-get install -y python3)
      changed_when: false

  tasks:
    # ---- UID/GID 衝突ガード（pi/new_user 以外が使用中なら中断）----
    - name: Check owner of target UID
      shell: getent passwd {{ new_user_uid }} | cut -d: -f1 || true
      register: uid_owner
      changed_when: false

    - name: Check owner of target GID
      shell: getent group {{ new_user_gid }} | cut -d: -f1 || true
      register: gid_owner
      changed_when: false

    - name: Fail if UID is in use by another user
      fail:
        msg: "UID {{ new_user_uid }} は既存ユーザー '{{ uid_owner.stdout | trim }}' が使用中です。new_user='{{ new_user }}' または 'pi' に一致しないため中断します。"
      when:
        - (uid_owner.stdout | trim) != ''
        - (uid_owner.stdout | trim) not in [ new_user, 'pi' ]

    - name: Fail if GID is in use by another group
      fail:
        msg: "GID {{ new_user_gid }} は既存グループ '{{ gid_owner.stdout | trim }}' が使用中です。new_user='{{ new_user }}' または 'pi' に一致しないため中断します。"
      when:
        - (gid_owner.stdout | trim) != ''
        - (gid_owner.stdout | trim) not in [ new_user, 'pi' ]

    - name: Update & upgrade apt packages
      apt:
        update_cache: yes
        upgrade: full
        cache_valid_time: 3600

    - name: Set timezone
      timezone:
        name: "{{ timezone }}"

    - name: Set hostname
      hostname:
        name: "{{ set_hostname }}"

    - name: Ensure sudo installed
      apt: { name: sudo, state: present }

    - name: Ensure primary group for new user exists
      group:
        name: "{{ new_user }}"
        state: present

    - name: Create admin user
      user:
        name: "{{ new_user }}"
        group: "{{ new_user }}"
        groups: "sudo"
        append: yes
        shell: /bin/bash
        create_home: yes
        state: present

    - name: Authorize SSH public key
      authorized_key:
        user: "{{ new_user }}"
        key: "{{ new_user_pubkey }}"
        state: present
        manage_dir: yes

    - name: Install security/base packages
      apt:
        name:
          - ufw
          - fail2ban
          - unattended-upgrades
          - apt-listchanges
          - curl
          - ca-certificates
        state: present
        update_cache: yes

    # ---- OS update policy ----
    - name: Configure unattended apt periodic jobs
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";
        mode: '0644'

    - name: Configure unattended-upgrades (security only)
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Origins-Pattern {
                  "origin=${distro_id},suite=${distro_codename}-security";
                  "origin=${distro_id},label=Debian-Security";
          };
          Unattended-Upgrade::Package-Blacklist {
                  "openmediavault";
                  "openmediavault-*";
                  "openmediavault-plugins-*";
                  "linux-image*";
                  "linux-headers*";
                  "linux-raspi*";
                  "raspberrypi-kernel*";
                  "raspberrypi-bootloader*";
          };
          Unattended-Upgrade::Automatic-Reboot "false";
        mode: '0644'
      notify: Restart unattended-upgrades

    - name: Ensure apt-daily.timer enabled
      systemd:
        name: apt-daily.timer
        state: started
        enabled: yes
        masked: no

    - name: Ensure apt-daily-upgrade.timer enabled
      systemd:
        name: apt-daily-upgrade.timer
        state: started
        enabled: yes
        masked: no

    # ---- SSH hardening ----
    - name: Disable root login over SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PermitRootLogin'
        line: 'PermitRootLogin no'
        create: no
        backrefs: no
      notify: Restart SSH

    - name: Enforce pubkey only auth (disable password auth)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PasswordAuthentication'
        line: 'PasswordAuthentication no'
      notify: Restart SSH

    - name: Ensure PubkeyAuthentication yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
      notify: Restart SSH

    # ---- UFW ----
    - name: Set UFW default deny incoming
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default allow outgoing
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: UFW allow needed ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ ufw_allow_ports }}"

    - name: Ensure UFW enabled
      community.general.ufw:
        state: enabled

    # ---- fail2ban (sshdだけ有効化の最小設定) ----
    - name: Configure fail2ban for sshd (minimal)
      copy:
        dest: /etc/fail2ban/jail.d/sshd.local
        content: |
          [sshd]
          enabled = true
          bantime = 1h
          findtime = 10m
          maxretry = 5
      notify: Restart fail2ban

    # ---- OMV install（未導入時のみ） ----
    - name: Check if OMV installed
      shell: dpkg -s openmediavault >/dev/null 2>&1 && echo present || echo absent
      register: omv_status
      changed_when: false

    - name: Download OMV installer script
      get_url:
        url: https://github.com/OpenMediaVault-Plugin-Developers/installScript/raw/master/install
        dest: /root/omv_install.sh
        mode: '0755'
      when: omv_status.stdout.strip() == "absent"

    - name: Run OMV installer
      shell: /root/omv_install.sh
      args:
        creates: /etc/openmediavault/config.xml
      register: omv_install
      when: omv_status.stdout.strip() == "absent"

    - name: Reboot if OMV just installed (WebUIが立ち上がるように)
      reboot:
      when: omv_install is changed

    - meta: flush_handlers

    # ---- Remove default 'pi' if存在 ----
    - name: Remove default pi user if exists
      user:
        name: pi
        state: absent
        remove: yes
      ignore_errors: yes

    - name: Remove default pi group if exists
      group:
        name: pi
        state: absent
      ignore_errors: yes

    - name: Ensure primary group uses desired GID
      group:
        name: "{{ new_user }}"
        gid: "{{ new_user_gid }}"
        state: present

    - name: Ensure admin user uses desired UID/GID
      user:
        name: "{{ new_user }}"
        uid: "{{ new_user_uid }}"
        group: "{{ new_user }}"
        groups: "sudo"
        append: yes
        shell: /bin/bash
        move_home: yes
        create_home: yes
        state: present
        force: yes

  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted

    - name: Restart fail2ban
      service:
        name: fail2ban
        state: restarted
        enabled: yes

    - name: Restart unattended-upgrades
      service:
        name: unattended-upgrades
        state: restarted
        enabled: yes
