---
- name: Raspberry Pi 初期セットアップ
  hosts: "{{ lookup('env', 'RASPI_TARGET_HOSTS') }}"
  gather_facts: yes
  become: yes

  vars:
    # ✅ 前提: Raspberry Pi OS セットアップ時に作成した管理ユーザーで接続して実行すること
    # Playbook は pi ユーザー削除と既存管理ユーザーの UID/GID を 1000 に揃えるのみ行う
    set_hostname: "{{ lookup('env', 'RASPI_SET_HOSTNAME') }}"
    timezone: "Asia/Tokyo"
    target_uid: 1000
    target_gid: 1000

    # UFWで開けるポート（OMV/SMB/NFS/SSHなど。環境に合わせて調整）
    ufw_allow_ports:
      - "22"          # SSH
      - "80"          # HTTP (OMV WebUI)
      - "443"         # HTTPS (OMV WebUI)
      - "139"         # SMB
      - "445"         # SMB
      - "111"         # NFS rpcbind
      - "2049"        # NFS
      - "892"         # NFS mountd (環境で必要なら)
      - "873"         # rsync (必要なら)

  pre_tasks:
    - name: Validate required environment for hosts and hostname
      assert:
        that:
          - (lookup('env','RASPI_TARGET_HOSTS') | length) > 0
          - (set_hostname | length) > 0
        fail_msg: |
          必須変数が不足しています。以下を環境変数で設定してください:
            - RASPI_TARGET_HOSTS (インベントリのホスト/グループ名)
            - RASPI_SET_HOSTNAME (セットするホスト名)

    - name: Ensure playbook is executed as the manually provisioned admin user
      assert:
        that:
          - ansible_user_id is defined
          - ansible_user_id != 'pi'
        fail_msg: |
          pi ユーザーのままではこの Playbook を実行できません。Raspberry Pi OS セットアップ時に作成した管理ユーザーで SSH 接続し直してください。

    - name: Ensure Python exists for Ansible (for super-minimal OS)
      raw: test -e /usr/bin/python3 || (apt-get update && apt-get install -y python3)
      changed_when: false

    - name: Gather admin user entry
      getent:
        database: passwd
        key: "{{ ansible_user_id }}"
      register: admin_user_entry

    - name: Record admin account facts
      set_fact:
        admin_user_uid: "{{ admin_user_entry.ansible_facts.getent_passwd[ansible_user_id][2] | int }}"
        admin_user_gid: "{{ admin_user_entry.ansible_facts.getent_passwd[ansible_user_id][3] | int }}"
        admin_user_home: "{{ admin_user_entry.ansible_facts.getent_passwd[ansible_user_id][5] }}"

    - name: Determine docker compose dotenv path
      set_fact:
        dotenv_path: "{{ dotenv_path | default(admin_user_home + '/raspi-media-server/.env', true) }}"
      tags: ['dotenv']

    - name: Validate dotenv path
      assert:
        that:
          - dotenv_path is defined
          - dotenv_path | path_is_absolute
        fail_msg: "dotenv_path は絶対パスで指定してください"
      tags: ['dotenv']

    - name: Check owner of target UID
      command: getent passwd {{ target_uid }} | cut -d: -f1 || true
      register: target_uid_owner
      changed_when: false

    - name: Fail if target UID occupied by unexpected user
      fail:
        msg: "UID {{ target_uid }} は '{{ target_uid_owner.stdout | trim }}' が使用中のため自動変換できません。手動で調整してから再実行してください。"
      when:
        - (target_uid_owner.stdout | trim) != ''
        - (target_uid_owner.stdout | trim) not in [ ansible_user_id, 'pi' ]

    - name: Check owner of target GID
      command: getent group {{ target_gid }} | cut -d: -f1 || true
      register: target_gid_owner
      changed_when: false

    - name: Fail if target GID occupied by unexpected group
      fail:
        msg: "GID {{ target_gid }} は '{{ target_gid_owner.stdout | trim }}' が使用中のため自動変換できません。手動で調整してから再実行してください。"
      when:
        - (target_gid_owner.stdout | trim) != ''
        - (target_gid_owner.stdout | trim) not in [ ansible_user_id, 'pi' ]

  tasks:
    - name: Update & upgrade apt packages
      apt:
        update_cache: yes
        upgrade: full
        cache_valid_time: 3600

    - name: Set timezone
      timezone:
        name: "{{ timezone }}"

    - name: Set hostname
      hostname:
        name: "{{ set_hostname }}"

    - name: Ensure sudo installed
      apt:
        name: sudo
        state: present

    - name: Ensure admin primary group exists
      group:
        name: "{{ ansible_user_id }}"
        state: present

    - name: Install security/base packages
      apt:
        name:
          - ufw
          - fail2ban
          - unattended-upgrades
          - apt-listchanges
          - curl
          - ca-certificates
        state: present
        update_cache: yes

    # ---- OS update policy ----
    - name: Configure unattended apt periodic jobs
      copy:
        dest: /etc/apt/apt.conf.d/20auto-upgrades
        content: |
          APT::Periodic::Update-Package-Lists "1";
          APT::Periodic::Download-Upgradeable-Packages "1";
          APT::Periodic::AutocleanInterval "7";
          APT::Periodic::Unattended-Upgrade "1";
        mode: '0644'

    - name: Configure unattended-upgrades (security only)
      copy:
        dest: /etc/apt/apt.conf.d/50unattended-upgrades
        content: |
          Unattended-Upgrade::Origins-Pattern {
                  "origin=${distro_id},suite=${distro_codename}-security";
                  "origin=${distro_id},label=Debian-Security";
          };
          Unattended-Upgrade::Package-Blacklist {
                  "openmediavault";
                  "openmediavault-*";
                  "openmediavault-plugins-*";
                  "linux-image*";
                  "linux-headers*";
                  "linux-raspi*";
                  "raspberrypi-kernel*";
                  "raspberrypi-bootloader*";
          };
          Unattended-Upgrade::Automatic-Reboot "false";
        mode: '0644'
      notify: Restart unattended-upgrades

    - name: Ensure apt-daily.timer enabled
      systemd:
        name: apt-daily.timer
        state: started
        enabled: yes
        masked: no

    - name: Ensure apt-daily-upgrade.timer enabled
      systemd:
        name: apt-daily-upgrade.timer
        state: started
        enabled: yes
        masked: no

    # ---- SSH hardening ----
    - name: Disable root login over SSH
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PermitRootLogin'
        line: 'PermitRootLogin no'
        create: no
        backrefs: no
      notify: Restart SSH

    - name: Enforce pubkey only auth (disable password auth)
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PasswordAuthentication'
        line: 'PasswordAuthentication no'
      notify: Restart SSH

    - name: Ensure PubkeyAuthentication yes
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?\s*PubkeyAuthentication'
        line: 'PubkeyAuthentication yes'
      notify: Restart SSH

    # ---- UFW ----
    - name: Set UFW default deny incoming
      community.general.ufw:
        direction: incoming
        policy: deny

    - name: Set UFW default allow outgoing
      community.general.ufw:
        direction: outgoing
        policy: allow

    - name: UFW allow needed ports
      community.general.ufw:
        rule: allow
        port: "{{ item }}"
      loop: "{{ ufw_allow_ports }}"

    - name: Ensure UFW enabled
      community.general.ufw:
        state: enabled

    # ---- fail2ban (sshdだけ有効化の最小設定) ----
    - name: Configure fail2ban for sshd (minimal)
      copy:
        dest: /etc/fail2ban/jail.d/sshd.local
        content: |
          [sshd]
          enabled = true
          bantime = 1h
          findtime = 10m
          maxretry = 5
      notify: Restart fail2ban

    # ---- OMV install（未導入時のみ） ----
    - name: Check if OMV installed
      shell: dpkg -s openmediavault >/dev/null 2>&1 && echo present || echo absent
      register: omv_status
      changed_when: false

    - name: Download OMV installer script
      get_url:
        url: https://github.com/OpenMediaVault-Plugin-Developers/installScript/raw/master/install
        dest: /root/omv_install.sh
        mode: '0755'
      when: omv_status.stdout.strip() == "absent"

    - name: Run OMV installer
      shell: /root/omv_install.sh
      args:
        creates: /etc/openmediavault/config.xml
      register: omv_install
      when: omv_status.stdout.strip() == "absent"

    - name: Reboot if OMV just installed (WebUIが立ち上がるように)
      reboot:
      when: omv_install is changed

    - meta: flush_handlers

    # ---- Remove default 'pi' if存在 ----
    - name: Remove default pi user if exists
      user:
        name: pi
        state: absent
        remove: yes
      ignore_errors: yes

    - name: Remove default pi group if exists
      group:
        name: pi
        state: absent
      ignore_errors: yes

    - name: Align admin primary group GID to target
      group:
        name: "{{ ansible_user_id }}"
        gid: "{{ target_gid }}"
        state: present

    - name: Align admin user UID/GID to target
      user:
        name: "{{ ansible_user_id }}"
        uid: "{{ target_uid }}"
        group: "{{ ansible_user_id }}"
        groups: "sudo"
        append: yes
        shell: /bin/bash
        move_home: yes
        create_home: yes
        state: present
        force: yes

    - name: Fix ownership of admin home directory
      file:
        path: "{{ admin_user_home }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        recurse: yes
      when: admin_user_home is defined and (admin_user_home | length) > 0

    - name: Ensure directory for dotenv exists
      file:
        path: "{{ dotenv_path | dirname }}"
        state: directory
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0755"
      when: (dotenv_path | dirname) not in ['', '.']
      tags: ['dotenv']

    - name: Render docker-compose dotenv file
      template:
        src: dotenv.j2
        dest: "{{ dotenv_path }}"
        owner: "{{ ansible_user_id }}"
        group: "{{ ansible_user_id }}"
        mode: "0600"
      vars:
        dotenv: "{{ dotenv | default({}) }}"
      tags: ['dotenv']

  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted

    - name: Restart fail2ban
      service:
        name: fail2ban
        state: restarted
        enabled: yes

    - name: Restart unattended-upgrades
      service:
        name: unattended-upgrades
        state: restarted
        enabled: yes
